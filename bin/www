#!/usr/bin/env node

require('coffeescript/register');

global.rootRequire = function(name) {
  return require(__dirname + '/../' + name);
};

/**
 * Module dependencies.
 */

var config = rootRequire('config/config');
var app = rootRequire('app');
var debug = require('debug')('expresstest:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.app_port);
app.set('port', port);

var orm = rootRequire('config/waterline');

/**
 * Initialize the ORM and Create HTTP server
 */

orm.initialize(app, app.get('port'), function(collections, datastores) {
    // store the collections and datastores retrieved to the app instance
    app.set('models',collections);
    app.set('datastores', datastores);
    var server = app.listen(app.get('port'), function() {
        debug('Express server listening on port ' + server.address().port);
        server.on('error', onError);
        server.on('listening', onListening);
    });
    console.log('server listening on port ' + app.get('port'));
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
